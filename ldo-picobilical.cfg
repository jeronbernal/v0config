# This file contains pin mappings for the LDO V0 Kit using the LDO Picobilical as a secondary controller.
# To use this config, the firmware should be compiled for the Raspberry Pi RP2040

# after running "make", copy the generated "klipper/out/klipper.uf2" firmware file 
# reboot the picobilical controller into BOOTSEL mode while connected to a PC, and copy the firmware file into the controller

## Voron Design VORON0 x LDO Picobilical partial config

## *** THINGS TO CHANGE/CHECK: ***
## MCU paths                            [mcu] section
## Thermistor types                     [extruder] sections

## *MAKE SURE* to include this partial config file *AFTER* the main controller config. 
## This will ensure the relavent sections are overwritten by the picobilical mappings specified here.

# [mcu umb]
# ##  Obtain definition by "ls -l /dev/serial/by-id/" then unplug to verify
# ##--------------------------------------------------------------------
# serial: /dev/serial/by-id/{REPLACE WITH YOUR SERIAL}
# restart_method: command
##--------------------------------------------------------------------

#####################################################################
#   X Stepper Settings
#####################################################################

## XES - Toolhead PCB
## Overwrites the X endstop connection 
#[stepper_x]
#endstop_pin: umb:gpio0


#####################################################################
#   Extruder
#####################################################################

# ## HE0, TH0 - Toolhead PCB
# ## Overwrites the extruder heater & thermistor connection
# [extruder]
# heater_pin: umb:gpio4
# sensor_type: ATC Semitec 104GT-2 # Change this to your actual thermistor type
# sensor_pin: umb:gpio29
# pullup_resistor: 4700


#####################################################################
#   Fan Control
#####################################################################

# PCF - Toolhead PCB
# Overwrites the part fan connection 
[fan]
pin: umb:gpio2

## HEF - Toolhead PCB
## Overwrites the hotend fan connection 
[heater_fan hotend_fan]
pin: umb:gpio3
heater: extruder
heater_temp: 50.0


[fan_generic aux_fan]
pin: expander:PA0
cycle_time: 0.01
hardware_pwm: false

[gcode_macro M106]
description: Custom fan control function to allow slicers assuming bambu lab specific aux fan control to define an auxilary part cooling fan speed
rename_existing: M106.1
gcode:
  ## define the device names of the controlled fans here. If you're not running a specific type of fan, remove it and the macro will have no effect

  ## Define the mapping between the bambu lab fans and the fan_generic fans defined
  ## Source: https://forum.bambulab.com/t/bambu-lab-x1-specific-g-code/666
  ## NOTE: ensure P0 is left as "fan". This is important as you cannot set the
  ## standard part cooling fan Using the set_fan_speed command.
  ## This is accounted for in the macro and handled appropriately.
  {% set fan_map = ({
      "P0": "fan",
      "P2": "aux_fan",
      # "P2": "chamber_fan",
    })
  %}

  ## Divide the params given into an array split on a singular whitespace
  {% set split_params = rawparams.split(" ") %}

  ## If we've had more than one paramater passed define requested fan and speed
  ## if one paramater is passed, assume were asking for the part cooling fan
  {% if split_params|length == 1 %}
    {% set requested_fan = "P0" %}
    {% set fan_speed = rawparams %}
  {% else %}
    {% set requested_fan, fan_speed = split_params %}
  {% endif %}

  ## check to ensure the requested fan is mapped
  ## this allows us to safely ignore commands for fans were not using
  {% if requested_fan in fan_map %}

    ## define the target fan device as per the above map
    {% set target_fan = fan_map[requested_fan] %}

    # If the target fan is the part cooling fan, just use the standard M106.
    {% if target_fan == "fan" %}
      M106.1 {fan_speed}
    {% else %}

      ## strip the leading S from the fan speed
      {% if fan_speed[0:1] == "S" %}
        {% set fan_speed = fan_speed[1:-1] %}
      {% endif %}

      # Convert the 0-255 fan percentage to a percentage out of 100
      # and round it to a while number
      {% set fan_percentage = (fan_speed|int / 255 * 10)|round(0) %}

      # Set the requested fan speed on the target fan
      SET_FAN_SPEED fan={target_fan} speed={fan_percentage}
      { action_respond_info('Setting %s to %s' % (target_fan, fan_speed)) }
    {% endif %}
  {% endif %}
#####################################################################
#   Neopixels
#####################################################################

## Neopixel 1 - Frame PCB
# [neopixel rgb1]
# pin: umb:gpio1
# chain_count: 1
# color_order: GRB
# initial_RED: 1
# initial_GREEN: 1
# initial_BLUE: 1

## Neopixel 2 - Frame PCB
[neopixel Skirt_LEDs]
pin: umb:gpio7
chain_count: 2
color_order: GRBW
initial_RED: 0
initial_GREEN: 0
initial_BLUE: 0
initial_WHITE: 1.0


## Buzzer - Frame PCB
[output_pin beeper]
pin: umb:gpio5
value: 0
shutdown_value: 0

[gcode_macro M300]
description: Custom M300 code to allow beeper to be used in gcode
gcode:
    {% set TIME_MS = params.P|default(100)|float %}
    SET_PIN PIN=beeper VALUE=1
    G4 P{TIME_MS}
    SET_PIN PIN=beeper VALUE=0

#####################################################################
#   Additional Sensors
#####################################################################

[thermistor CMFB103F3950FANT]
temperature1: 0.0
resistance1: 32116.0
temperature2: 40.0
resistance2: 5309.0
temperature3: 80.0
resistance3: 1228.0

## CT - Frame PCB
## Chamber thermistor
[temperature_sensor chamber_temp]
sensor_type: CMFB103F3950FANT
sensor_pin: umb:gpio28
pullup_resistor: 2200
min_temp: 0
max_temp: 100
gcode_id: chamber_th

## FS - Frame PCB
## Filament Sensor 1
#[filament_switch_sensor runout_sensor]
#switch_pin: umb:gpio6
#pause_on_runout: True

## SU - Frame PCB
## Filament Sensor 2
#[gcode_button filament_sensor_button]
#pin: umb:gpio18
# release_gcode: {INSERT YOUR GCODE HERE}